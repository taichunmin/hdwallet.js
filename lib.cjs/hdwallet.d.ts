import { Entropy } from './entropies';
import { Mnemonic } from './mnemonics';
import { Seed } from './seeds';
import { Cryptocurrency } from './cryptocurrencies/cryptocurrency';
import { HDWalletAddressOptionsInterface, HDWalletOptionsInterface } from './interfaces';
import { Derivation } from './derivations';
export declare class HDWallet {
    private cryptocurrency;
    private network;
    private address;
    private hd;
    private addressType?;
    private addressPrefix?;
    private entropy?;
    private language;
    private passphrase;
    private mnemonic?;
    private seed?;
    derivation?: Derivation;
    private semantic?;
    private mode?;
    private mnemonicType?;
    private publicKeyType?;
    private cardanoType?;
    private useDefaultPath;
    private checksum;
    private stakingPublicKey?;
    private paymentID?;
    constructor(cryptocurrency: typeof Cryptocurrency, options?: HDWalletOptionsInterface);
    fromEntropy(entropy: Entropy): HDWallet;
    fromMnemonic(mnemonic: Mnemonic): HDWallet;
    fromSeed(seed: Seed): HDWallet;
    fromXPrivateKey(xprivateKey: string, encoded?: boolean, strict?: boolean): HDWallet;
    fromXPublicKey(xpublicKey: string, encoded?: boolean, strict?: boolean): HDWallet;
    fromDerivation(derivation: Derivation): HDWallet;
    updateDerivation(derivation: Derivation): HDWallet;
    cleanDerivation(): HDWallet;
    fromPrivateKey(privateKey: string): HDWallet;
    fromWIF(wif: string): HDWallet;
    fromPublicKey(publicKey: string): HDWallet;
    fromSpendPrivateKey(spendPrivateKey: string): HDWallet;
    fromWatchOnly(viewPrivateKey: string, spendPublicKey: string): HDWallet;
    getCryptocurrency(): string;
    getSymbol(): string;
    getCoinType(): number;
    getNetwork(): string;
    getEntropy(): string | null;
    getStrength(): number | null;
    getMnemonic(): string | null;
    getMnemonicType(): string | null;
    getLanguage(): string | null;
    getWords(): number | null;
    getPassphrase(): string | null;
    getSeed(): string | null;
    getECC(): string;
    getHD(): string;
    getSemantic(): string | null;
    getCardanoType(): string | null;
    getMode(): string;
    getPathKey(): string | null;
    getRootXPrivateKey(semantic?: string, encoded?: boolean): string | null;
    getRootXPublicKey(semantic?: string, encoded?: boolean): string | null;
    getMasterXPrivateKey(semantic?: string, encoded?: boolean): string | null;
    getMasterXPublicKey(semantic?: string, encoded?: boolean): string | null;
    getRootPrivateKey(): string | null;
    getRootWIF(wifType?: string): string | null;
    getRootChainCode(): string | null;
    getRootPublicKey(publicKeyType?: string): string | null;
    getMasterPrivateKey(): string | null;
    getMasterWIF(wifType?: string): string | null;
    getMasterChainCode(): string | null;
    getMasterPublicKey(publicKeyType?: string): string | null;
    getXPrivateKey(semantic?: string, encoded?: boolean): string | null;
    getXPublicKey(semantic?: string, encoded?: boolean): string | null;
    getPrivateKey(): string | null;
    getSpendPrivateKey(): string | null;
    getViewPrivateKey(): string;
    getWIF(wifType?: string): string | null;
    getWIFType(): string | null;
    getChainCode(): string | null;
    getPublicKey(publicKeyType?: string): string;
    getPublicKeyType(): string;
    getUncompressed(): string;
    getCompressed(): string;
    getSpendPublicKey(): string;
    getViewPublicKey(): string;
    getHash(): string;
    getDepth(): number;
    getFingerprint(): string;
    getParentFingerprint(): string;
    getPath(): string;
    getIndex(): number;
    getIndexes(): number[];
    getStrict(): boolean | null;
    getPrimaryAddress(): string | null;
    getIntegratedAddress(paymentID?: string): string | null;
    getSubAddress(minor?: number, major?: number): string | null;
    getAddress(options?: HDWalletAddressOptionsInterface): string | null;
    getDump(exclude?: string[]): Record<string, any>;
    getDumps(exclude?: string[]): Record<string, any> | Record<string, any>[] | null;
}
//# sourceMappingURL=hdwallet.d.ts.map